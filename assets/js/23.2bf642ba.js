(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{447:function(e,t,o){"use strict";o.r(t);var i=o(69),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"push-vs-pull"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#push-vs-pull"}},[e._v("#")]),e._v(" Push vs Pull")]),e._v(" "),o("h4",{attrs:{id:"all-the-events-important-from-the-partner-system-perspective-are-reflected-with-notifications-generated-by-docplanner-application-they-can-be-either-pushed-to-partner-endpoint-or-pulled-from-docplanner-notifications-endpoint"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#all-the-events-important-from-the-partner-system-perspective-are-reflected-with-notifications-generated-by-docplanner-application-they-can-be-either-pushed-to-partner-endpoint-or-pulled-from-docplanner-notifications-endpoint"}},[e._v("#")]),e._v(" All the events important from the partner system perspective are reflected with notifications generated by Docplanner application. They can be either pushed to partner endpoint or pulled from Docplanner notifications endpoint.")]),e._v(" "),o("p",[e._v("There are two possible ways to be notified about events.")]),e._v(" "),o("ul",[o("li",[e._v("Pulling notifications constantly from our endpoint.")]),e._v(" "),o("li",[e._v("Or we will be pushing notifications to your endpoint.")])]),e._v(" "),o("p",[e._v("You can either use one or both of them.")]),e._v(" "),o("p",[e._v("There are few notification types:")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("slot-changed")]),e._v(" When doctor changes free slots on his\\her own calendar.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("slot-booking")]),e._v(" (optional) When patient is about to book a visit our system sends a notification to the specified 3rd party webhook, if 3rd party responds with 2xx HTTP Status Codes to the request the visit will be approved anything except 2xx HTTP Status Codes will not allow booking.")]),e._v(" "),o("p",[e._v("Note that this notification is optional and will be enabled on request of the 3rd.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("slot-booked")]),e._v(" When patient books a visit from a doctor or doctor books a visit from their calendar.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("booking-canceled")]),e._v(" When patient or doctor cancels a visit.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("booking-moved")]),e._v(" When doctor or patient changes the date or hour of the booking.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("booking-moving")]),e._v(" When patient is about to change a date or hour of a visit our system sends a notification to the specified 3rd party webhook, if 3rd party responds with 2xx HTTP Status Codes to the request the visit will be moved. Anything except 2xx HTTP Status Codes will not allow moving.")]),e._v(" "),o("p",[e._v("This notification is optional and will be enabled on request of the 3rd party.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("break-created")]),e._v(" When doctor created a break on their calendar.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("break-removed")]),e._v(" When doctor deleted the break from their calendar.")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("presence-marked")]),e._v(" When presence was marked by doctor or patient.")])])]),e._v(" "),o("p",[e._v("The detailed structure of callback notifications can be found in our API documentation here. "),o("Add",{attrs:{link:"",to:"",callbacks:"",in:"",API:"",docs:""}})],1),e._v(" "),o("h4",{attrs:{id:"push-notifications"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#push-notifications"}},[e._v("#")]),e._v(" PUSH Notifications")]),e._v(" "),o("p",[e._v("To be able to use this method, client should provide an endpoint url.  The endpoint should be provided with each customer's activation  (see Process section)")]),e._v(" "),o("p",[o("code",[e._v("HTTP POST")]),e._v(" method will be used to push event data to endpoint.")]),e._v(" "),o("div",{staticClass:"custom-block warning"},[o("p",{staticClass:"custom-block-title"},[e._v("Sending push events")]),e._v(" "),o("p",[e._v("In case of unsuccessful delivery of an event (status code different than 2XX) notifications will be sent 2 more times, after 5 and 10 minutes. In case of not processing them correctly, the notifications are buried and can be only re-triggered manually.")])]),e._v(" "),o("h4",{attrs:{id:"pull-notifications"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#pull-notifications"}},[e._v("#")]),e._v(" PULL Notifications")]),e._v(" "),o("p",[e._v("You can pull notifications via our endpoint:")]),e._v(" "),o("div",{staticClass:"language-no-highlight extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("https://www.{domain}/api/v3/integration/notifications\n")])])]),o("p",[e._v("This page will respond to you with the earliest notification you haven’t been pulled yet. "),o("code",[e._v("First In First Out (FIFO)")]),e._v(" principle applied here.")]),e._v(" "),o("p",[e._v("This endpoint will respond with "),o("strong",[e._v("one notification per request")]),e._v(" until there aren’t any notifications left in the notification stack.")]),e._v(" "),o("div",{staticClass:"custom-block warning"},[o("p",{staticClass:"custom-block-title"},[e._v("Maintaining pull process")]),e._v(" "),o("p",[e._v("Notifications that are not pulled in 72 hours are marked as expired and deleted from the system")])])])}),[],!1,null,null,null);t.default=n.exports}}]);