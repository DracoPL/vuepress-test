(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{459:function(t,e,a){"use strict";a.r(e);var n=a(69),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sdk-for-net"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sdk-for-net"}},[t._v("#")]),t._v(" SDK for .NET")]),t._v(" "),a("h2",{attrs:{id:"_1-introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-introduction"}},[t._v("#")]),t._v(" 1. Introduction")]),t._v(" "),a("p",[t._v("Our SDK is created in .NET Standard 2.0, so we are supporting .NET Framework 4.6.1+ and .NET Core 2.0+")]),t._v(" "),a("p",[t._v("More information and documentation you can find in our "),a("a",{attrs:{href:"https://docplanner.github.io/integrations-hub-front-app/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integrations Hub"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_1-1-requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-requirements"}},[t._v("#")]),t._v(" 1.1. Requirements")]),t._v(" "),a("p",[t._v("This package doesn't have special requirements. Within package we bundle "),a("code",[t._v("Newtonsoft.Json 12.0.0+")]),t._v(" and "),a("code",[t._v("System.ComponentModel.Annotations 5.0.0+")])]),t._v(" "),a("h2",{attrs:{id:"_2-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-setup"}},[t._v("#")]),t._v(" 2. Setup")]),t._v(" "),a("h3",{attrs:{id:"_2-1-getting-package"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-getting-package"}},[t._v("#")]),t._v(" 2.1. Getting package")]),t._v(" "),a("p",[t._v("Package can be found in Docplanner [public repository](https://dev.azure.com/docplanner/Public packages/_packaging?_a=package&feed=integrations%40Local&package=Integrations.Api.Sdk&protocolType=NuGet).")]),t._v(" "),a("p",[t._v("You need to add new package source "),a("code",[t._v("https://pkgs.dev.azure.com/docplanner/c4fa307b-7faf-45b9-a23f-faace862ad8f/_packaging/integrations%40Local/nuget/v3/index.json")]),t._v(" in NuGet config.")]),t._v(" "),a("p",[t._v("After that look for package "),a("code",[t._v("Integrations.Api.Sdk")]),t._v(" in package manager.")]),t._v(" "),a("h3",{attrs:{id:"_2-2-authentication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-authentication"}},[t._v("#")]),t._v(" 2.2. Authentication")]),t._v(" "),a("p",[t._v("We use OAuth 2.0 protocol for endpoints authentication.")]),t._v(" "),a("p",[t._v("You need to get token from endpoint "),a("code",[t._v("https://www.{domain}/oauth/v2/token")]),t._v(" with specific grand type and scope using your "),a("code",[t._v("client_id")]),t._v(" and "),a("code",[t._v("client_secret")]),t._v(" for basic authorization.")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var values = new List<KeyValuePair<string, string>>\n{\n    new KeyValuePair<string, string>("grant_type", "client_credentials"),\n    new KeyValuePair<string, string>("scope", "integration")\n};\nrequestMessage.Headers.Add("Authorization", $"Basic {client_id}:{client_secret}");\n')])])]),a("p",[t._v("You must use token in "),a("code",[t._v("Authorization")]),t._v(" header to access API endpoints.")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "your_token");\n')])])]),a("p",[t._v("More information about authentication you can find "),a("a",{attrs:{href:"http://docplanner.github.io/integrations-api-docs/openapi/#section/Authentication",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"_3-using-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-using-client"}},[t._v("#")]),t._v(" 3. Using Client")]),t._v(" "),a("h3",{attrs:{id:"_3-1-client-naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-client-naming"}},[t._v("#")]),t._v(" 3.1. Client naming")]),t._v(" "),a("p",[t._v("Client are named according to tags in "),a("RouterLink",{attrs:{to:"/guide/tools-and-libraries/docplanner.github.io/integrations-api-docs/openapi/"}},[t._v("api docs")]),t._v(".")],1),t._v(" "),a("p",[t._v("So if we have "),a("code",[t._v("Services")]),t._v(" tag then client will be named "),a("code",[t._v("ServicesClient")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"_3-2-using-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-using-client"}},[t._v("#")]),t._v(" 3.2. Using Client")]),t._v(" "),a("p",[t._v("As seen in example we call "),a("code",[t._v("FacilitiesClient")]),t._v(" to get list of facilities. We create "),a("code",[t._v("HttpClient")]),t._v(" with base URI "),a("code",[t._v("https://www.{domain}/api/v3/integration")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var httpClient = new HttpClient()\n{\n\tBaseAddress = new Uri("https://www.{domain}/api/v3/integration")\n};\nhttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await GetToken()); //get token\nvar apiTest = new FacilitiesClient(httpClient);\nvar result = await apiTest.FacilitiesGetAsync();\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);